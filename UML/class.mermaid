classDiagram
    class Main {
        +main() void
    }
    class DataManipulator {
    }
    class GameDataConverter {

    }

    class Game {
        +init_game(Player[]) void
        -current_fleet : Ship[]
        -Phase1() void
        -Phase2() void
        -Phase3() void
        -Phase4() void
        %% phase 4 pour la phase de score
        +get_Instance()
        -instance : Game$
        -play_round() void
        -start_player : Player
    }
    class Player {
        -name : string
        -commands_order :
        -score : int
        %% je sais pas quoi mettre en type
        -ships : Ship[]
        -score_sector : Sector
        -additional_score_sector : Sector
        +Expand() void
        +Explore() void
        +Exterminate() void
    }
    class Area {
        -grid
        +neighbors_pattern$
        +sectors_pattern$
        +generate() void
    }
    class Sector {
        -id : int
    }
    class Border_sector {
        -used_patterns : List~~$
        +patterns$
        +generate_system(rotate: bool) void
    }
    class Middle_sector {
        +patterns$
        +generate_system() void
        %% se rotate alÃ©atoirement
    }
    class Tri_prime {
        +generate_system() void
    }
    class System {
        -used : bool
        -level : int
    }
    class Ship {
        -used : bool
        +get_player() Player
    }
    class Cell {
        -id : int
        -neighbors : Cell[]
        +get_system() System[]
        +get_number_ship() int
        +get_ship() Ship[]
        +get_control_player() Player
    }

    Game *--> "2..*" Player
    Game *--> "1" Area
    Main *--> "1" Game
    Area "1" o--> "46" Cell
    Sector "1" o--> "1,4,5" Cell
    Sector <|-- Border_sector
    Sector <|-- Middle_sector
    Sector <|-- Tri_prime
    Cell "1" *--> "*" System
    Player *--> "15" Ship
    Area *--> "9" Sector
    Ship "1" o--> "0,1" Cell
    Cell "1" o--> "2..*" Cell

    class IOhandler {
        <<abstract>>
        -IOmode:Enum~CLI,App~
        +chose_order()*
        +expand()*
        +explore()*
        +exterminate()*
        +score()*
    }
    class CLI {
        +chose_order()
        +expand()
        +explore()
        +exterminate()
        +score()
    }
    class App {
        +chose_order()
        +expand()
        +explore()
        +exterminate()
        +score()
    }
    IOhandler <-- CLI : implement
    IOhandler <-- App : implement